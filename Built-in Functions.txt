Lab Exercises

Find Book Titles

SELECT
    title
FROM
    books
WHERE
    SUBSTRING(title, 1, 3) = 'The'
ORDER BY
    id
;

Replace Titles

SELECT REPLACE(title, 'The', '***')
FROM
    books
WHERE LEFT(title, 3) = 'The'
ORDER BY
    id
;

Triangles on Bookshelves

SELECT
    id,
    side * height / 2 AS area
FROM
    triangles
ORDER BY
    id
;

Format Costs

SELECT
    title,
    TRUNC(cost, 3) AS "modified_price"
FROM
    books
ORDER BY
    id
;

Year of Birth

SELECT
    first_name,
    last_name,
    EXTRACT(YEAR FROM born) AS "year"
FROM authors
;

Format Date of Birth

SELECT
    last_name AS "Last Name",
    TO_CHAR(born, 'DD (Dy) Mon YYYY') AS "Date of Birth"
FROM authors
;

Harry Potter Books

SELECT
    title
FROM
    books
WHERE
    title LIKE '%Harry Potter%'
;


Homework Exercises


 River Info

CREATE VIEW view_river_info AS
SELECT
    CONCAT_WS(' ', 'The river', river_name, 'flows into the', outflow, 'and is', "length", 'kilometers long.') AS "River Information"
FROM
    rivers
ORDER BY
    river_name
;

Concatenate Geography Data

CREATE VIEW view_continents_countries_currencies_details AS
SELECT 
    CONCAT(TRIM(cont.continent_name), ': ', cont.continent_code) AS continent_details,
    CONCAT_WS(' - ', countr.country_name, countr.capital, countr.area_in_sq_km, 'km2') AS country_information,
    CONCAT(curr.description, ' (', curr.currency_code, ')') AS currencies
FROM
    countries AS countr,
    continents AS cont,
    currencies AS curr
WHERE
    cont.continent_code = countr.continent_code
        AND
    countr.currency_code = curr.currency_code
ORDER BY
    country_information ASC,
    currencies ASC
;

Capital Code

ALTER TABLE
    countries
ADD COLUMN
    capital_code CHAR (2)
;

UPDATE
    countries
SET
    capital_code = SUBSTRING(capital, 1, 2)
;

(Descr)iption

SELECT
    SUBSTRING(description, 5)
FROM
    currencies
;

Substring River Length

SELECT
    SUBSTRING("River Information", '([0-9]{1,4})') AS river_length
FROM
    view_river_info
;

Replace A

SELECT
    REPLACE(mountain_range, 'a', '@') AS replace_a,
    REPLACE(mountain_range, 'A', '$') AS replace_A
FROM
    mountains
;

Character Length and Bits

SELECT
    CONCAT(m.mountain_range, ' ', p.peak_name) AS mountain_information,
    LENGTH(CONCAT(m.mountain_range, ' ', p.peak_name)) AS characters_length,
    BIT_LENGTH(CONCAT(m.mountain_range, ' ', p.peak_name)) AS bits_of_a_tring
FROM
    mountains AS m,
    peaks AS p
WHERE
    m.id = p.mountain_id
;

Length of a Number

SELECT
    population,
    LENGTH(CAST(population AS VARCHAR)) AS length
FROM
    countries
;

 Positive and Negative LEFT

SELECT
    peak_name,
    LEFT(peak_name, 4) AS positive_left,
    LEFT(peak_name, -4) AS negative_left
FROM
    peaks
;

SELECT
    peak_name,
    RIGHT(peak_name, 4) AS positive_right,
    RIGHT(peak_name, -4) AS negative_right
FROM
    peaks
;

Positive and Negative RIGHT

SELECT
    peak_name,
    RIGHT(peak_name, 4) AS positive_right,
    RIGHT(peak_name, -4) AS negative_right
FROM
    peaks
;

Update iso_code

UPDATE
    countries
SET
    iso_code = UPPER(LEFT(country_name, 3))
WHERE 
    iso_code IS NULL
;

REVERSE country_code

UPDATE
    countries
SET
    country_code = LOWER(REVERSE(country_code))
;

Elevation --->> Peak Name

SELECT
    CONCAT(elevation, ' ', REPEAT('-', 3), REPEAT('>', 2), ' ', peak_name) AS "Elevation --->> Peak Name"
FROM
    peaks
WHERE
    elevation >= 4884
;

Arithmetical Operators

CREATE TABLE
    bookings_calculation
AS SELECT
    booked_for
FROM
    bookings
WHERE
    apartment_id = 93
;

ALTER TABLE
    bookings_calculation
ADD COLUMN
    multiplication NUMERIC,
ADD COLUMN
    modulo NUMERIC
;

UPDATE
    bookings_calculation
SET
    multiplication = booked_for * 50,
    modulo = booked_for % 50
;

ROUND vs TRUNC

SELECT
    latitude,
    ROUND(latitude, 2),
    TRUNC(latitude, 2)
FROM
    apartments
;

EXTRACT Booked At

SELECT
    EXTRACT(YEAR from booked_at) AS "YEAR",
    EXTRACT(MONTH from booked_at) AS "MONTH",
    EXTRACT(DAY from booked_at) AS "DAY",
    EXTRACT(HOUR from booked_at) AS "HOUR",
    EXTRACT(MINUTE from booked_at) AS "MINUTE",
    CEILING(EXTRACT(SECOND from booked_at)) AS "SECOND"
FROM
    bookings
;

Match or Not

SELECT
    companion_full_name,
    email
FROM
    users
WHERE   
    companion_full_name ILIKE '%and%'
        AND
    email NOT LIKE '%@gmail'
;

COUNT by Initial

SELECT
	LEFT(first_name, 2) AS initials,
	COUNT('initials') AS user_count
FROM 
	users
GROUP BY
	initials
ORDER BY
	user_count DESC,
	initials ASC
;

Translate

SELECT
    capital,
    TRANSLATE(capital, 'áãåçéíñóú', 'aaaceinou') AS translated_name
FROM
    countries
;

LTRIM & RTRIM

SELECT
    LTRIM(peak_name, 'M') AS left_trim,
    RTRIM(peak_name, 'm') AS right_trim
FROM
    peaks
;

