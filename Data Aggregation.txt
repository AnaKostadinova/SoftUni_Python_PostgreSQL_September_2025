Lab Exercises

 Departments Info by ID

SELECT
    department_id,
    count(*) AS employee_count
FROM
    employees
GROUP BY
    department_id
ORDER BY 
    department_id
;

Departments Info by Salary

SELECT
    department_id,
    count(salary) AS employee_count
FROM
    employees
GROUP BY 
    department_id
ORDER BY
    department_id
;

Sum Salaries per Department

SELECT
    department_id,
    sum(salary) AS "total_salaries"
FROM
    employees
GROUP BY
    department_id
ORDER BY
    department_id
;

Maximum Salary

SELECT
    department_id,
    max(salary) AS "max_salary"
FROM
    employees
GROUP BY
    department_id
ORDER BY
    department_id
;   

Minimum Salary

SELECT
    department_id,
    min(salary) AS "min_salary"
FROM
    employees
GROUP BY
    department_id
ORDER BY
    department_id
;   

Average Salary

SELECT
    department_id,
    avg(salary) AS "avg_salary"
FROM
    employees
GROUP BY
    department_id
ORDER BY
    department_id
;   

Filter Total Salaries

SELECT
    department_id,
    sum(salary) AS "Total Salary"
FROM
    employees
GROUP BY
    department_id
HAVING
    sum(salary) < 4200
ORDER BY
    department_id
;

Department Names

SELECT
    id,
    first_name,
    last_name,
    TRUNC(salary, 2),
    department_id,
    CASE 
        WHEN department_id = 1 THEN 'Management'
        WHEN department_id = 2 THEN 'Kitchen Staff'
        WHEN department_id = 3 THEN 'Service Staff'
        ELSE 'Other'
    END AS "department_name"
FROM
    employees
;


Homework Exercises

GROUP BY Deposit Interest

SELECT
    deposit_group,
    SUM(deposit_interest) AS deposit_interest
FROM
    wizard_deposits
GROUP BY
    deposit_group
ORDER BY
    SUM(deposit_interest) DESC
;

LIMIT the Magic Wand Creator

SELECT
    magic_wand_creator,
    MIN(magic_wand_size) AS "minimum_wand_size"
FROM    
    wizard_deposits
GROUP BY
    magic_wand_creator
ORDER BY
    minimum_wand_size
LIMIT 5
;

Bank Profitability

SELECT
    deposit_group,
    is_deposit_expired,
    FLOOR(AVG(deposit_interest)) AS deposit_interest
FROM    
    wizard_deposits
WHERE
    deposit_start_date > '1985-01-01'
GROUP BY
    is_deposit_expired,
    deposit_group
ORDER BY
    deposit_group DESC,
    is_deposit_expired
;

Notes with Dumbledore

SELECT
    last_name,
    COUNT(notes) AS "notes_with_dumbledore"
FROM
    wizard_deposits
WHERE
    notes LIKE '%Dumbledore%'
GROUP BY
    last_name
;

Wizard View

CREATE VIEW view_wizard_deposits_with_expiration_date_before_1983_08_17 AS
SELECT 
    CONCAT(first_name, ' ', last_name) AS "wizard_name",
    deposit_start_date AS "start_date",
    deposit_expiration_date AS "expiration_date",
    deposit_amount AS "amount"
FROM
    wizard_deposits
WHERE
    deposit_expiration_date <= '1983-08-17'
GROUP BY
    wizard_name,
    start_date,
    expiration_date,
    amount
ORDER BY
    expiration_date ASC
;

 Filter Max Deposit

SELECT
    magic_wand_creator,
    MAX(deposit_amount) AS "max_deposit_amount"
FROM
    wizard_deposits
GROUP BY
    magic_wand_creator
HAVING
    MAX(deposit_amount) NOT BETWEEN 20000 AND 40000
ORDER BY
    max_deposit_amount DESC LIMIT 3
;

Age Group

SELECT
    CASE
        WHEN age BETWEEN 0 and 10 THEN '[0-10]'
        WHEN age BETWEEN 11 and 20 THEN '[11-20]'
        WHEN age BETWEEN 21 and 30 THEN '[21-30]'
        WHEN age BETWEEN 31 and 40 THEN '[31-40]'
        WHEN age BETWEEN 41 and 50 THEN '[41-50]'
        WHEN age BETWEEN 51 and 60 THEN '[51-60]'
        WHEN age >= 61 THEN '[61+]'
    END AS "age_group",
    COUNT(*) 
FROM
    wizard_deposits
GROUP BY
    age_group
ORDER BY
    age_group
;

SUM the Employees

SELECT
    COUNT(CASE WHEN department_id = 1 THEN 1 END) AS "Engineering",
    COUNT(CASE WHEN department_id = 2 THEN 2 END) AS "Tool Design",
    COUNT(CASE WHEN department_id = 3 THEN 3 END) AS "Sales",
    COUNT(CASE WHEN department_id = 4 THEN 4 END) AS "Marketing",
    COUNT(CASE WHEN department_id = 5 THEN 5 END) AS "Purchasing",
    COUNT(CASE WHEN department_id = 6 THEN 6 END) AS "Research and Development",
    COUNT(CASE WHEN department_id = 7 THEN 7 END) AS "Production"
FROM
    employees
;

Update Employeesâ€™ Data

UPDATE 
    employees 
SET
    salary = CASE
        WHEN hire_date < '2015-01-16' THEN salary + 2500
        WHEN hire_date < '2020-03-04' THEN salary + 1500
        ELSE salary
    END,
    job_title = CASE
        WHEN hire_date < '2015-01-16' THEN CONCAT('Senior', ' ', job_title)
        WHEN hire_date < '2020-03-04' THEN CONCAT('Mid-', job_title)
        ELSE job_title
    END
;

 Categorizes Salary

SELECT
    job_title,
    CASE
        WHEN AVG(salary) > 45800 THEN 'Good'
        WHEN AVG(salary) BETWEEN 27500 AND 45800 THEN 'Medium'
        WHEN AVG(salary) < 27500 THEN 'Need Improvement'
    END AS "category"
FROM
    employees
GROUP BY
    job_title
ORDER BY
    category,
    job_title
;

WHERE Project Status

SELECT
    project_name,
    CASE
        WHEN start_date IS NULL AND end_date IS NULL THEN 'Ready for development'
        WHEN start_date IS NOT NULL AND end_date IS NULL THEN 'In Progress'
        ELSE 'Done'
    END
FROM
    projects
WHERE
    project_name LIKE '%Mountain%'
;

HAVING Salary Level

SELECT
    department_id,
    COUNT(department_id) AS "num_employees",
    CASE
        WHEN AVG(salary) > 50000 THEN 'Above average'
        WHEN AVG(salary) <= 50000 THEN 'Below average'
    END AS "salary_level"
FROM
    employees
GROUP BY
    department_id
HAVING
    AVG(salary) > 30000
ORDER BY
    department_id
;

Nested CASE Conditions

CREATE VIEW view_performance_rating AS
    SELECT
        first_name, 
        last_name, 
        job_title,
        salary,
        department_id,
        CASE
            WHEN salary >= 25000 THEN
                CASE
                    WHEN job_title LIKE 'Senior%' THEN 'High-performing Senior'
                    ELSE 'High-performing Employee'
                END
            ELSE 'Average-performing'
        END AS "performance_rating"
FROM
    employees
;

